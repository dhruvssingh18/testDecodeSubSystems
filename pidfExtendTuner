package PIDFtuners;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.arcrobotics.ftclib.controller.PIDFController;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;

@Config
@TeleOp(name = "PIDF Extend Tuner")
public class PIDFextend extends OpMode {

    private PIDFController controller;

    public static double p = 0, i = 0, d = 0, f = 0;
    public static int target = 0;

    private final double ticks_in_degree = 700 / 180.0;

    private DcMotorEx arm;

    @Override
    public void init() {
        controller = new PIDFController(p, i, d, f);
        telemetry = new MultipleTelemetry(telemetry, FtcDashboard.getInstance().getTelemetry());

        arm = hardwareMap.get(DcMotorEx.class, "arm");
    }

    @Override
    public void loop() {
        controller.setPIDF(p, i, d, f);
        int armPos = arm.getCurrentPosition();
        double pid = controller.calculate(armPos, target);
        double ff = Math.cos(Math.toRadians(target / ticks_in_degree)) * f;

        double power = pid + ff;
        arm.setPower(power);

        telemetry.addData("armPos", armPos);
        telemetry.addData("target", target);
        telemetry.update();
    }
}
